import{_ as s,o as a,c as e,R as o}from"./chunks/framework.omYO23xM.js";const h=JSON.parse('{"title":"Function: curry()","description":"","frontmatter":{},"headers":[],"relativePath":"api/pipe/strict/functions/curry.md","filePath":"api/pipe/strict/functions/curry.md","lastUpdated":null}'),n={name:"api/pipe/strict/functions/curry.md"},r=o(`<h1 id="function-curry" tabindex="-1">Function: curry() <a class="header-anchor" href="#function-curry" aria-label="Permalink to &quot;Function: curry()&quot;">​</a></h1><p><a href="./../">pipe/strict</a>.curry</p><blockquote><p><strong>curry</strong>&lt;<code>A</code>, <code>B</code>&gt;(<code>fn</code>, <code>args</code>): (<code>args</code>) =&gt; <a href="./../../../types/-internal-/type-aliases/ReturnType.html"><code>ReturnType</code></a>&lt;<code>A</code>&gt;</p></blockquote><p>Curry for single arg function</p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><p>▪ <strong>A</strong> extends <a href="./../../../types/type-aliases/SingleArgFunction.html"><code>SingleArgFunction</code></a></p><p>▪ <strong>B</strong> extends <a href="./../../../types/-internal-/type-aliases/Partial.html"><code>Partial</code></a>&lt;<a href="./../../../types/-internal-/type-aliases/Parameters.html"><code>Parameters</code></a>&lt;<code>A</code>&gt;[<code>0</code>]&gt;</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>▪ <strong>fn</strong>: <code>A</code></p><p>▪ <strong>args</strong>: <code>B</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>function</code></p><blockquote><blockquote><p>(<code>args</code>): <a href="./../../../types/-internal-/type-aliases/ReturnType.html"><code>ReturnType</code></a>&lt;<code>A</code>&gt;</p></blockquote><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p>▪ <strong>args</strong>: <a href="./../../../types/-internal-/type-aliases/Omit.html"><code>Omit</code></a>&lt;<a href="./../../../types/-internal-/type-aliases/Parameters.html"><code>Parameters</code></a>&lt;<code>A</code>&gt;[<code>0</code>], keyof <code>B</code>&gt;</p><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="./../../../types/-internal-/type-aliases/ReturnType.html"><code>ReturnType</code></a>&lt;<code>A</code>&gt;</p></blockquote><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">args</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">a</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">; </span><span style="color:#FFAB70;">b</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> }) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> args.a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> args.b</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">curriedAdd</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">curry</span><span style="color:#E1E4E8;">(add, { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">curriedAdd</span><span style="color:#E1E4E8;">({ b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> }) </span><span style="color:#6A737D;">// 3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">args</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">a</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">; </span><span style="color:#E36209;">b</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> }) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> args.a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> args.b</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">curriedAdd</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">curry</span><span style="color:#24292E;">(add, { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">curriedAdd</span><span style="color:#24292E;">({ b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">// 3</span></span></code></pre></div><p><a href="https://github.com/niuiic/fx-flow/blob/main/packages/test/src/pipe/strict/curry.spec.ts" target="_blank" rel="noreferrer">More examples</a></p><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h2><p><a href="https://github.com/niuiic/fx-flow/blob/1a85e3d/packages/core/src/pipe/strict/curry.ts#L15" target="_blank" rel="noreferrer">packages/core/src/pipe/strict/curry.ts:15</a></p>`,18),t=[r];function p(l,c,y,i,d,u){return a(),e("div",null,t)}const g=s(n,[["render",p]]);export{h as __pageData,g as default};
