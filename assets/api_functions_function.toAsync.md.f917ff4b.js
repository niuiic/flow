import{_ as e,o as a,c as t,O as s}from"./chunks/framework.7fc6a857.js";const f=JSON.parse('{"title":"toAsync()","description":"","frontmatter":{},"headers":[],"relativePath":"api/functions/function.toAsync.md","filePath":"api/functions/function.toAsync.md"}'),o={name:"api/functions/function.toAsync.md"},n=s(`<h1 id="toasync" tabindex="-1">toAsync() <a class="header-anchor" href="#toasync" aria-label="Permalink to &quot;toAsync()&quot;">​</a></h1><p><strong><code>Function</code></strong></p><blockquote><p><strong>toAsync</strong>&lt;T&gt;(args: <a href="./../module.internal_/interfaces/interface.Iterable.html"><code>Iterable</code></a>&lt;<code>T</code> | <code>Promise</code>&lt;<code>T</code>&gt;&gt;): <a href="./../module.internal_/interfaces/interface.AsyncIterableIterator.html"><code>AsyncIterableIterator</code></a>&lt;<a href="./../module.internal_/type-aliases/type-alias.Awaited.html"><code>Awaited</code></a>&lt;<code>T</code>&gt;&gt;</p></blockquote><p>Returns AsyncIterable, it is used when you want to handle Promise values inside Iterable.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> v </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">toAsync</span><span style="color:#A6ACCD;">([</span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">])) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">v</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(res) </span><span style="color:#676E95;font-style:italic;">// 6</span></span></code></pre></div><p><a href="https://github.com/niuiic/flow/blob/main/tests/functions/lazy/toAsync.spec.ts" target="_blank" rel="noreferrer">More examples</a></p><p><strong>Source:</strong> <a href="https://github.com/niuiic/flow/blob/de99081/src/functions/lazy/toAsync.ts#L17" target="_blank" rel="noreferrer">src/functions/lazy/toAsync.ts:17</a></p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th></tr></thead><tbody><tr><td style="text-align:left;">T</td></tr></tbody></table><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;">args</td><td style="text-align:left;"><a href="./../module.internal_/interfaces/interface.Iterable.html"><code>Iterable</code></a>&lt;<code>T</code> | <code>Promise</code>&lt;<code>T</code>&gt;&gt;</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../module.internal_/interfaces/interface.AsyncIterableIterator.html"><code>AsyncIterableIterator</code></a>&lt;<a href="./../module.internal_/type-aliases/type-alias.Awaited.html"><code>Awaited</code></a>&lt;<code>T</code>&gt;&gt;</p>`,14),l=[n];function r(c,p,i,y,d,A){return a(),t("div",null,l)}const C=e(o,[["render",r]]);export{f as __pageData,C as default};
