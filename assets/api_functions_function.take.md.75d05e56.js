import{_ as e,o as t,c as a,O as r}from"./chunks/framework.7fc6a857.js";const u=JSON.parse('{"title":"take()","description":"","frontmatter":{},"headers":[],"relativePath":"api/functions/function.take.md","filePath":"api/functions/function.take.md"}'),l={name:"api/functions/function.take.md"},o=r(`<h1 id="take" tabindex="-1">take() <a class="header-anchor" href="#take" aria-label="Permalink to &quot;take()&quot;">​</a></h1><p><strong><code>Function</code></strong></p><blockquote><p><strong>take</strong>&lt;A&gt;(length: <code>number</code>, iterable: <a href="./../module.internal_/interfaces/interface.Iterable.html"><code>Iterable</code></a>&lt;<code>A</code>&gt;): <a href="./../module.internal_/interfaces/interface.IterableIterator.html"><code>IterableIterator</code></a>&lt;<code>A</code>&gt;</p></blockquote><p>Returns IterableIterator/AsyncIterableIterator that take <code>length</code> values from iterable</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> v </span><span style="color:#89DDFF;">of</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">take</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">])) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">v</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1, 2</span></span></code></pre></div><p><a href="https://github.com/niuiic/flow/blob/main/tests/functions/lazy/take.spec.ts" target="_blank" rel="noreferrer">More examples</a></p><p><strong>Source:</strong> <a href="https://github.com/niuiic/flow/blob/b8037b7/src/functions/lazy/take.ts#L44" target="_blank" rel="noreferrer">src/functions/lazy/take.ts:44</a></p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th></tr></thead><tbody><tr><td style="text-align:left;">A</td></tr></tbody></table><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;">length</td><td style="text-align:left;"><code>number</code></td></tr><tr><td style="text-align:left;">iterable</td><td style="text-align:left;"><a href="./../module.internal_/interfaces/interface.Iterable.html"><code>Iterable</code></a>&lt;<code>A</code>&gt;</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../module.internal_/interfaces/interface.IterableIterator.html"><code>IterableIterator</code></a>&lt;<code>A</code>&gt;</p><blockquote><p><strong>take</strong>&lt;A&gt;(length: <code>number</code>, iterable: <a href="./../module.internal_/interfaces/interface.AsyncIterable.html"><code>AsyncIterable</code></a>&lt;<code>A</code>&gt;): <a href="./../module.internal_/interfaces/interface.AsyncIterableIterator.html"><code>AsyncIterableIterator</code></a>&lt;<a href="./../module.internal_/type-aliases/type-alias.Awaited.html"><code>Awaited</code></a>&lt;<code>A</code>&gt;&gt;</p></blockquote><p><strong>Source:</strong> <a href="https://github.com/niuiic/flow/blob/b8037b7/src/functions/lazy/take.ts#L46" target="_blank" rel="noreferrer">src/functions/lazy/take.ts:46</a></p><h2 id="type-parameters-1" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th></tr></thead><tbody><tr><td style="text-align:left;">A</td></tr></tbody></table><h2 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;">length</td><td style="text-align:left;"><code>number</code></td></tr><tr><td style="text-align:left;">iterable</td><td style="text-align:left;"><a href="./../module.internal_/interfaces/interface.AsyncIterable.html"><code>AsyncIterable</code></a>&lt;<code>A</code>&gt;</td></tr></tbody></table><h2 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../module.internal_/interfaces/interface.AsyncIterableIterator.html"><code>AsyncIterableIterator</code></a>&lt;<a href="./../module.internal_/type-aliases/type-alias.Awaited.html"><code>Awaited</code></a>&lt;<code>A</code>&gt;&gt;</p><blockquote><p><strong>take</strong>&lt;A&gt;(length: <code>number</code>): <code>Function</code></p></blockquote><p><strong>Source:</strong> <a href="https://github.com/niuiic/flow/blob/b8037b7/src/functions/lazy/take.ts#L48" target="_blank" rel="noreferrer">src/functions/lazy/take.ts:48</a></p><h2 id="type-parameters-2" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-2" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th></tr></thead><tbody><tr><td style="text-align:left;">A <em>extends</em> <a href="./../module.internal_/type-aliases/type-alias.UniversalIterable.html"><code>UniversalIterable</code></a></td></tr></tbody></table><h2 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;">length</td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h2 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>Function</code></p><blockquote><blockquote><p>(iterable: <code>A</code>): <a href="./../module.internal_/type-aliases/type-alias.IteratorReturnValue.html"><code>IteratorReturnValue</code></a>&lt;<code>A</code>&gt;</p></blockquote><h3 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;">iterable</td><td style="text-align:left;"><code>A</code></td></tr></tbody></table><h3 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="./../module.internal_/type-aliases/type-alias.IteratorReturnValue.html"><code>IteratorReturnValue</code></a>&lt;<code>A</code>&gt;</p></blockquote>`,31),s=[o];function n(c,d,i,p,h,b){return t(),a("div",null,s)}const f=e(l,[["render",n]]);export{u as __pageData,f as default};
