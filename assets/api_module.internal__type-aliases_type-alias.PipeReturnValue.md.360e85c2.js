import{_ as e,o as t,c as a,O as o}from"./chunks/framework.4afe7240.js";const h=JSON.parse('{"title":"PipeReturnValue<T>","description":"","frontmatter":{},"headers":[],"relativePath":"api/module.internal_/type-aliases/type-alias.PipeReturnValue.md","filePath":"api/module.internal_/type-aliases/type-alias.PipeReturnValue.md"}'),r={name:"api/module.internal_/type-aliases/type-alias.PipeReturnValue.md"},s=o('<h1 id="pipereturnvalue-t" tabindex="-1">PipeReturnValue<code>&lt;T&gt;</code> <a class="header-anchor" href="#pipereturnvalue-t" aria-label="Permalink to &quot;PipeReturnValue`&lt;T&gt;`&quot;">​</a></h1><p><strong><code>Type alias</code></strong></p><blockquote><p><strong>PipeReturnValue</strong>: &lt;<code>T</code>&gt; <code>T</code> <em>extends</em> [infer First, infer Second, ...(infer Rest)] ? <code>First</code> <em>extends</em> <code>Promise</code>&lt;<code>unknown</code>&gt; | <a href="./../interfaces/interface.AsyncIterable.html"><code>AsyncIterable</code></a>&lt;<code>unknown</code>&gt; ? <a href="./type-alias.FixedPromise.html"><code>FixedPromise</code></a>&lt;<a href="./type-alias.Tail.html"><code>Tail</code></a>&lt;<code>T</code>&gt;&gt; : <a href="./type-alias.PipeReturnValue.html"><code>PipeReturnValue</code></a>&lt;[<code>Second</code>, ...Rest]&gt; : <code>T</code>[0]</p></blockquote><p>T = [...Rest, Last], any one of Rest is async ? FixedPromise&lt;Last&gt; : Last</p><p><strong>Source:</strong> <a href="https://github.com/niuiic/flow/blob/8427ebb/src/types/pipe.ts#L4" target="_blank" rel="noreferrer">src/types/pipe.ts:4</a></p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th></tr></thead><tbody><tr><td style="text-align:left;">T <em>extends</em> <code>unknown</code>[]</td></tr></tbody></table>',7),l=[s];function n(i,c,d,p,u,m){return t(),a("div",null,l)}const f=e(r,[["render",n]]);export{h as __pageData,f as default};
