import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.1baa841b.js";const f=JSON.parse('{"title":"Function: flat()","description":"","frontmatter":{},"headers":[],"relativePath":"api/pipe/lazy/functions/flat.md","filePath":"api/pipe/lazy/functions/flat.md","lastUpdated":null}'),e={name:"api/pipe/lazy/functions/flat.md"},p=l(`<p><a href="./../../../modules.html">fx-flow</a> / <a href="./../">pipe/lazy</a> / flat</p><h1 id="function-flat" tabindex="-1">Function: flat() <a class="header-anchor" href="#function-flat" aria-label="Permalink to &quot;Function: flat()&quot;">​</a></h1><blockquote><p><strong>flat</strong>&lt;<code>A</code>, <code>B</code>&gt;(<code>iterable</code>, <code>depth</code>?): <a href="./../../../types/type-aliases/FlatReturnValue.html"><code>FlatReturnValue</code></a>&lt;<code>A</code>, <code>B</code>&gt;</p></blockquote><p>Return flattened Iterable/AsyncIterable. If first argument is number, more perform flatten <code>flat(2, [[[1,2]]]) // [1,2]</code>.</p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><p>▪ <strong>A</strong> extends <a href="./../../../types/type-aliases/UniversalIterable.html"><code>UniversalIterable</code></a></p><p>▪ <strong>B</strong> extends <code>number</code> = <code>1</code></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>▪ <strong>iterable</strong>: <code>A</code></p><p>▪ <strong>depth?</strong>: <code>B</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../../../types/type-aliases/FlatReturnValue.html"><code>FlatReturnValue</code></a>&lt;<code>A</code>, <code>B</code>&gt;</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iter</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">flat</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">],[[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]]]);</span></span>
<span class="line"><span style="color:#E1E4E8;">iter.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// {done:false, value: 1}</span></span>
<span class="line"><span style="color:#E1E4E8;">iter.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// {done:false, value: 2}</span></span>
<span class="line"><span style="color:#E1E4E8;">iter.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// {done:false, value: 3}</span></span>
<span class="line"><span style="color:#E1E4E8;">iter.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// {done:false, value: [4, 5]}</span></span>
<span class="line"><span style="color:#E1E4E8;">iter.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// {done:true, value: undefined}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">],[[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]]],</span></span>
<span class="line"><span style="color:#E1E4E8;"> flat,</span></span>
<span class="line"><span style="color:#E1E4E8;"> toArray,</span></span>
<span class="line"><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// [1, 2, 3, [4, 5]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">],[[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]]]),</span></span>
<span class="line"><span style="color:#E1E4E8;"> flat,</span></span>
<span class="line"><span style="color:#E1E4E8;"> toArray,</span></span>
<span class="line"><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// [1, 2, 3, [4, 5]]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iter</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">flat</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">],[[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]]]);</span></span>
<span class="line"><span style="color:#24292E;">iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// {done:false, value: 1}</span></span>
<span class="line"><span style="color:#24292E;">iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// {done:false, value: 2}</span></span>
<span class="line"><span style="color:#24292E;">iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// {done:false, value: 3}</span></span>
<span class="line"><span style="color:#24292E;">iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// {done:false, value: [4, 5]}</span></span>
<span class="line"><span style="color:#24292E;">iter.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// {done:true, value: undefined}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">],[[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]]],</span></span>
<span class="line"><span style="color:#24292E;"> flat,</span></span>
<span class="line"><span style="color:#24292E;"> toArray,</span></span>
<span class="line"><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [1, 2, 3, [4, 5]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">],[[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]]]),</span></span>
<span class="line"><span style="color:#24292E;"> flat,</span></span>
<span class="line"><span style="color:#24292E;"> toArray,</span></span>
<span class="line"><span style="color:#24292E;">); </span><span style="color:#6A737D;">// [1, 2, 3, [4, 5]]</span></span></code></pre></div><p><a href="https://github.com/niuiic/fx-flow/blob/main/packages/test/src/pipe/lazy/flat.spec.ts" target="_blank" rel="noreferrer">More examples</a></p><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h2><p><a href="https://github.com/niuiic/fx-flow/blob/c1ee195/packages/core/src/pipe/lazy/flat.ts#L197" target="_blank" rel="noreferrer">packages/core/src/pipe/lazy/flat.ts:197</a></p>`,17),o=[p];function t(r,c,y,E,i,d){return a(),n("div",null,o)}const F=s(e,[["render",t]]);export{f as __pageData,F as default};
