import{_ as s,o as n,c as e,V as a}from"./chunks/framework.d3b95951.js";const t="/immutable.png",_=JSON.parse('{"title":"Pure Function","description":"","frontmatter":{},"headers":[],"relativePath":"guide/pureFunc.md","filePath":"guide/pureFunc.md","lastUpdated":1688959394000}'),l={name:"guide/pureFunc.md"},p=a('<h1 id="pure-function" tabindex="-1">Pure Function <a class="header-anchor" href="#pure-function" aria-label="Permalink to &quot;Pure Function&quot;">â€‹</a></h1><p>Immutable restrictions on function input parameters usually greatly increase the runtime burden.</p><p>This library provides an <code>Immutable</code> tool type, tries to make this restriction with typescript and then there would be no performance loss when running.</p><p><img src="'+t+'" alt="immutable showcase"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Immutable</code> has the second parameters to specify types to ignore.</p></div><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// `Immutable` will expand the input type.</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// `File` is a builtin type, and expaned `File` is not equal to unexpaned `File`.</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// You may need to ignore `File`, or it cannot satisfies another `File`.</span></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Res</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Immutable</span><span style="color:#89DDFF;">&lt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">file</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">File</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">File</span></span>\n<span class="line"><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// Res = {</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">//   readonly file: File</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// }</span></span></code></pre></div>',6),o=[p];function c(i,r,u,y,d,m){return n(),e("div",null,o)}const h=s(l,[["render",c]]);export{_ as __pageData,h as default};
