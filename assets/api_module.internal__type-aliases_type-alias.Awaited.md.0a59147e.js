import{_ as e,o as t,c as a,O as o}from"./chunks/framework.7fc6a857.js";const u=JSON.parse('{"title":"Awaited<T>","description":"","frontmatter":{},"headers":[],"relativePath":"api/module.internal_/type-aliases/type-alias.Awaited.md","filePath":"api/module.internal_/type-aliases/type-alias.Awaited.md"}'),d={name:"api/module.internal_/type-aliases/type-alias.Awaited.md"},s=o('<h1 id="awaited-t" tabindex="-1">Awaited<code>&lt;T&gt;</code> <a class="header-anchor" href="#awaited-t" aria-label="Permalink to &quot;Awaited`&lt;T&gt;`&quot;">​</a></h1><p><strong><code>Type alias</code></strong></p><blockquote><p><strong>Awaited</strong>: &lt;<code>T</code>&gt; <code>T</code> <em>extends</em> <code>null</code> | <code>undefined</code> ? <code>T</code> : <code>T</code> <em>extends</em> <code>object</code> &amp; {then: ;} ? <code>F</code> <em>extends</em> (value: infer V, ...args: infer _) =&gt; <code>any</code> ? <a href="./type-alias.Awaited.html"><code>Awaited</code></a>&lt;<code>V</code>&gt; : <code>never</code> : <code>T</code></p></blockquote><p>Recursively unwraps the &quot;awaited type&quot; of a type. Non-promise &quot;thenables&quot; should resolve to <code>never</code>. This emulates the behavior of <code>await</code>.</p><p><strong>Source:</strong> node_modules/.pnpm/typescript@5.0.4/node_modules/typescript/lib/lib.es5.d.ts:1542</p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th></tr></thead><tbody><tr><td style="text-align:left;">T</td></tr></tbody></table>',7),r=[s];function c(i,l,n,p,_,m){return t(),a("div",null,r)}const y=e(d,[["render",c]]);export{u as __pageData,y as default};
