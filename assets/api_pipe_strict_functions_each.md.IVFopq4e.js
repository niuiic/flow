import{_ as e,c as a,o as t,R as r}from"./chunks/framework.YlTiAyro.js";const g=JSON.parse('{"title":"Function: each()","description":"","frontmatter":{},"headers":[],"relativePath":"api/pipe/strict/functions/each.md","filePath":"api/pipe/strict/functions/each.md","lastUpdated":null}'),o={name:"api/pipe/strict/functions/each.md"},s=r('<p><a href="./../../../modules.html">fx-flow</a> / <a href="./../">pipe/strict</a> / each</p><h1 id="function-each" tabindex="-1">Function: each() <a class="header-anchor" href="#function-each" aria-label="Permalink to &quot;Function: each()&quot;">​</a></h1><h2 id="each-fn-iterable" tabindex="-1">each(fn, iterable) <a class="header-anchor" href="#each-fn-iterable" aria-label="Permalink to &quot;each(fn, iterable)&quot;">​</a></h2><blockquote><p><strong>each</strong>&lt;<code>A</code>, <code>R</code>&gt;(<code>fn</code>, <code>iterable</code>): <code>void</code></p></blockquote><p>Iterates over Iterable/AsyncIterable, applying each in turn to <code>fn</code>.</p><h3 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h3><p>• <strong>A</strong></p><p>• <strong>R</strong> = <code>unknown</code></p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p>• <strong>fn</strong>: (<code>args</code>) =&gt; <code>R</code></p><p>• <strong>iterable</strong>: <a href="./../-internal-/interfaces/Iterable.html"><code>Iterable</code></a>&lt;<code>A</code>&gt;</p><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><code>void</code></p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">each</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(console.log, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// log 1, 2, 3</span></span></code></pre></div><p><a href="https://github.com/niuiic/fx-flow/blob/main/packages/test/src/pipe/strict/each.spec.ts" target="_blank" rel="noreferrer">More examples</a></p><h3 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h3><p><a href="https://github.com/niuiic/fx-flow/blob/64d8d3e/packages/core/src/pipe/strict/each.ts#L29" target="_blank" rel="noreferrer">packages/core/src/pipe/strict/each.ts:29</a></p><h2 id="each-fn-iterable-1" tabindex="-1">each(fn, iterable) <a class="header-anchor" href="#each-fn-iterable-1" aria-label="Permalink to &quot;each(fn, iterable)&quot;">​</a></h2><blockquote><p><strong>each</strong>&lt;<code>A</code>, <code>R</code>&gt;(<code>fn</code>, <code>iterable</code>): <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><h3 id="type-parameters-1" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h3><p>• <strong>A</strong></p><p>• <strong>R</strong> = <code>unknown</code></p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p>• <strong>fn</strong>: (<code>args</code>) =&gt; <code>R</code></p><p>• <strong>iterable</strong>: <a href="./../-internal-/interfaces/AsyncIterable.html"><code>AsyncIterable</code></a>&lt;<code>A</code>&gt;</p><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><code>Promise</code>&lt;<code>void</code>&gt;</p><h3 id="source-1" tabindex="-1">Source <a class="header-anchor" href="#source-1" aria-label="Permalink to &quot;Source&quot;">​</a></h3><p><a href="https://github.com/niuiic/fx-flow/blob/64d8d3e/packages/core/src/pipe/strict/each.ts#L31" target="_blank" rel="noreferrer">packages/core/src/pipe/strict/each.ts:31</a></p><h2 id="each-fn" tabindex="-1">each(fn) <a class="header-anchor" href="#each-fn" aria-label="Permalink to &quot;each(fn)&quot;">​</a></h2><blockquote><p><strong>each</strong>&lt;<code>A</code>, <code>R</code>&gt;(<code>fn</code>): (<code>iterable</code>) =&gt; <a href="./../../../types/type-aliases/IterableReturnValue.html"><code>IterableReturnValue</code></a>&lt;<a href="./../../../types/type-aliases/UniversalIterable.html"><code>UniversalIterable</code></a>&lt;<code>A</code>&gt;, <code>void</code>&gt;</p></blockquote><h3 id="type-parameters-2" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-2" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h3><p>• <strong>A</strong></p><p>• <strong>R</strong> = <code>unknown</code></p><h3 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p>• <strong>fn</strong>: (<code>args</code>) =&gt; <code>R</code></p><h3 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><code>Function</code></p><blockquote><h4 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p>• <strong>iterable</strong>: <a href="./../../../types/type-aliases/UniversalIterable.html"><code>UniversalIterable</code></a>&lt;<code>A</code>&gt;</p><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../../../types/type-aliases/IterableReturnValue.html"><code>IterableReturnValue</code></a>&lt;<a href="./../../../types/type-aliases/UniversalIterable.html"><code>UniversalIterable</code></a>&lt;<code>A</code>&gt;, <code>void</code>&gt;</p></blockquote><h3 id="source-2" tabindex="-1">Source <a class="header-anchor" href="#source-2" aria-label="Permalink to &quot;Source&quot;">​</a></h3><p><a href="https://github.com/niuiic/fx-flow/blob/64d8d3e/packages/core/src/pipe/strict/each.ts#L33" target="_blank" rel="noreferrer">packages/core/src/pipe/strict/each.ts:33</a></p>',42),c=[s];function i(n,l,h,d,p,u){return t(),a("div",null,c)}const f=e(o,[["render",i]]);export{g as __pageData,f as default};
