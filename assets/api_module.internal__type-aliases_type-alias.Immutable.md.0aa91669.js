import{_ as e,o as t,c as a,O as o}from"./chunks/framework.7fc6a857.js";const b=JSON.parse('{"title":"Immutable<T, Ignore>","description":"","frontmatter":{},"headers":[],"relativePath":"api/module.internal_/type-aliases/type-alias.Immutable.md","filePath":"api/module.internal_/type-aliases/type-alias.Immutable.md"}'),l={name:"api/module.internal_/type-aliases/type-alias.Immutable.md"},d=o('<h1 id="immutable-t-ignore" tabindex="-1">Immutable<code>&lt;T, Ignore&gt;</code> <a class="header-anchor" href="#immutable-t-ignore" aria-label="Permalink to &quot;Immutable`&lt;T, Ignore&gt;`&quot;">​</a></h1><p><strong><code>Type alias</code></strong></p><blockquote><p><strong>Immutable</strong>: &lt;<code>T</code>, <code>Ignore</code>&gt; <code>T</code> <em>extends</em> <code>T</code> ? <code>T</code> <em>extends</em> <a href="./type-alias.Primitive.html"><code>Primitive</code></a> | <a href="./type-alias.AnyFunction.html"><code>AnyFunction</code></a> | <code>Ignore</code> ? <code>T</code> : <code>T</code> <em>extends</em> infer U[] ? <a href="./type-alias.IsTuple.html"><code>IsTuple</code></a>&lt;<code>T</code>&gt; <em>extends</em> true ? <a href="./type-alias.ImmutableTuple.html"><code>ImmutableTuple</code></a>&lt;<code>T</code>&gt; : <a href="./type-alias.ImmutableArray.html"><code>ImmutableArray</code></a>&lt;<code>U</code>&gt; : <code>T</code> <em>extends</em> <code>Map</code>&lt;infer K, infer V&gt; ? <a href="./type-alias.ImmutableMap.html"><code>ImmutableMap</code></a>&lt;<code>K</code>, <code>V</code>&gt; : <code>T</code> <em>extends</em> <code>Set</code>&lt;infer M&gt; ? <a href="./type-alias.ImmutableSet.html"><code>ImmutableSet</code></a>&lt;<code>M</code>&gt; : <a href="./type-alias.ImmutableObject.html"><code>ImmutableObject</code></a>&lt;<code>T</code>&gt; : <code>never</code></p></blockquote><p><strong>Source:</strong> <a href="https://github.com/niuiic/flow/blob/837709c/src/types/immutable.ts#L13" target="_blank" rel="noreferrer">src/types/immutable.ts:13</a></p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Default</th></tr></thead><tbody><tr><td style="text-align:left;">T</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">Ignore</td><td style="text-align:left;"><code>never</code></td></tr></tbody></table>',6),c=[d];function r(m,s,i,n,p,u){return t(),a("div",null,c)}const g=e(l,[["render",r]]);export{b as __pageData,g as default};
