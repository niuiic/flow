import{_ as e,o as t,c as a,Q as s}from"./chunks/framework.ed6abfc6.js";const y=JSON.parse('{"title":"Function: consume","description":"","frontmatter":{},"headers":[],"relativePath":"api/pipe_strict/functions/function.consume.md","filePath":"api/pipe_strict/functions/function.consume.md","lastUpdated":null}'),o={name:"api/pipe_strict/functions/function.consume.md"},n=s('<h1 id="function-consume" tabindex="-1">Function: consume <a class="header-anchor" href="#function-consume" aria-label="Permalink to &quot;Function: consume&quot;">​</a></h1><blockquote><p><strong>consume</strong>&lt;<code>A</code>&gt;(<code>iterable</code>, <code>length</code>?): <a href="./../../types/type-aliases/type-alias.IterableReturnValue.html"><code>IterableReturnValue</code></a>&lt; <code>A</code>, <code>void</code> &gt;</p></blockquote><p>Consumes the given <code>length</code> of Iterable/AsyncIterable.</p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th></tr></thead><tbody><tr><td style="text-align:left;"><code>A</code> <em>extends</em> <a href="./../../types/type-aliases/type-alias.UniversalIterable.html"><code>UniversalIterable</code></a></td></tr></tbody></table><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>iterable</code></td><td style="text-align:left;"><code>A</code></td></tr><tr><td style="text-align:left;"><code>length</code>?</td><td style="text-align:left;"><code>number</code></td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../../types/type-aliases/type-alias.IterableReturnValue.html"><code>IterableReturnValue</code></a>&lt; <code>A</code>, <code>void</code> &gt;</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(userList, toAsync, </span><span style="color:#B392F0;">peek</span><span style="color:#E1E4E8;">(queryUserInfo), </span><span style="color:#B392F0;">consume</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Infinity</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(userList, toAsync, </span><span style="color:#6F42C1;">peek</span><span style="color:#24292E;">(queryUserInfo), </span><span style="color:#6F42C1;">consume</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Infinity</span><span style="color:#24292E;">))</span></span></code></pre></div><p><a href="https://github.com/niuiic/fx-flow/blob/main/packages/test/src/pipe/strict/consume.spec.ts" target="_blank" rel="noreferrer">More examples</a></p><h2 id="defined-in" tabindex="-1">Defined In <a class="header-anchor" href="#defined-in" aria-label="Permalink to &quot;Defined In&quot;">​</a></h2><p><a href="https://github.com/niuiic/fx-flow/blob/4746af4/packages/core/src/pipe/strict/consume.ts#L34" target="_blank" rel="noreferrer">packages/core/src/pipe/strict/consume.ts:34</a></p>',14),r=[n];function l(c,p,i,d,u,h){return t(),a("div",null,r)}const f=e(o,[["render",l]]);export{y as __pageData,f as default};
