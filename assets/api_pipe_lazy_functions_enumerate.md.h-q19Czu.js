import{_ as e,c as a,o as t,R as r}from"./chunks/framework.YlTiAyro.js";const b=JSON.parse('{"title":"Function: enumerate()","description":"","frontmatter":{},"headers":[],"relativePath":"api/pipe/lazy/functions/enumerate.md","filePath":"api/pipe/lazy/functions/enumerate.md","lastUpdated":null}'),s={name:"api/pipe/lazy/functions/enumerate.md"},o=r(`<p><a href="./../../../modules.html">fx-flow</a> / <a href="./../">pipe/lazy</a> / enumerate</p><h1 id="function-enumerate" tabindex="-1">Function: enumerate() <a class="header-anchor" href="#function-enumerate" aria-label="Permalink to &quot;Function: enumerate()&quot;">​</a></h1><h2 id="enumerate-iterable" tabindex="-1">enumerate(iterable) <a class="header-anchor" href="#enumerate-iterable" aria-label="Permalink to &quot;enumerate(iterable)&quot;">​</a></h2><blockquote><p><strong>enumerate</strong>&lt;<code>A</code>&gt;(<code>iterable</code>): <a href="./../../../types/-internal-/interfaces/IterableIterator.html"><code>IterableIterator</code></a>&lt;[<code>number</code>, <code>A</code>]&gt;</p></blockquote><p>Returns Iterable/AsyncIterable of values with index.</p><h3 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h3><p>• <strong>A</strong></p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p>• <strong>iterable</strong>: <a href="./../../strict/-internal-/interfaces/Iterable.html"><code>Iterable</code></a>&lt;<code>A</code>&gt;</p><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="./../../../types/-internal-/interfaces/IterableIterator.html"><code>IterableIterator</code></a>&lt;[<code>number</code>, <code>A</code>]&gt;</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enumerate,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toArray,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [[0, 1], [1, 2]]</span></span></code></pre></div><p><a href="https://github.com/niuiic/fx-flow/blob/main/packages/test/src/pipe/lazy/enumerate.spec.ts" target="_blank" rel="noreferrer">More examples</a></p><h3 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h3><p><a href="https://github.com/niuiic/fx-flow/blob/64d8d3e/packages/core/src/pipe/lazy/enumerate.ts#L66" target="_blank" rel="noreferrer">packages/core/src/pipe/lazy/enumerate.ts:66</a></p><h2 id="enumerate-iterable-1" tabindex="-1">enumerate(iterable) <a class="header-anchor" href="#enumerate-iterable-1" aria-label="Permalink to &quot;enumerate(iterable)&quot;">​</a></h2><blockquote><p><strong>enumerate</strong>&lt;<code>A</code>&gt;(<code>iterable</code>): <a href="./../../../types/-internal-/interfaces/AsyncIterableIterator.html"><code>AsyncIterableIterator</code></a>&lt;[<code>number</code>, <code>A</code>]&gt;</p></blockquote><h3 id="type-parameters-1" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h3><p>• <strong>A</strong></p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p>• <strong>iterable</strong>: <a href="./../../strict/-internal-/interfaces/AsyncIterable.html"><code>AsyncIterable</code></a>&lt;<code>A</code>&gt;</p><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="./../../../types/-internal-/interfaces/AsyncIterableIterator.html"><code>AsyncIterableIterator</code></a>&lt;[<code>number</code>, <code>A</code>]&gt;</p><h3 id="source-1" tabindex="-1">Source <a class="header-anchor" href="#source-1" aria-label="Permalink to &quot;Source&quot;">​</a></h3><p><a href="https://github.com/niuiic/fx-flow/blob/64d8d3e/packages/core/src/pipe/lazy/enumerate.ts#L67" target="_blank" rel="noreferrer">packages/core/src/pipe/lazy/enumerate.ts:67</a></p><h2 id="enumerate" tabindex="-1">enumerate() <a class="header-anchor" href="#enumerate" aria-label="Permalink to &quot;enumerate()&quot;">​</a></h2><blockquote><p><strong>enumerate</strong>&lt;<code>A</code>&gt;(): (<code>iterable</code>) =&gt; <a href="./../../../types/type-aliases/IteratorReturnValue.html"><code>IteratorReturnValue</code></a>&lt;<code>A</code>, [<code>number</code>, <a href="./../../../types/type-aliases/UniversalIterableItem.html"><code>UniversalIterableItem</code></a>&lt;<code>A</code>&gt;]&gt;</p></blockquote><h3 id="type-parameters-2" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-2" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h3><p>• <strong>A</strong> extends <a href="./../../../types/type-aliases/UniversalIterable.html"><code>UniversalIterable</code></a></p><h3 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><code>Function</code></p><blockquote><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p>• <strong>iterable</strong>: <code>A</code></p><h4 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../../../types/type-aliases/IteratorReturnValue.html"><code>IteratorReturnValue</code></a>&lt;<code>A</code>, [<code>number</code>, <a href="./../../../types/type-aliases/UniversalIterableItem.html"><code>UniversalIterableItem</code></a>&lt;<code>A</code>&gt;]&gt;</p></blockquote><h3 id="source-2" tabindex="-1">Source <a class="header-anchor" href="#source-2" aria-label="Permalink to &quot;Source&quot;">​</a></h3><p><a href="https://github.com/niuiic/fx-flow/blob/64d8d3e/packages/core/src/pipe/lazy/enumerate.ts#L68" target="_blank" rel="noreferrer">packages/core/src/pipe/lazy/enumerate.ts:68</a></p>`,35),n=[o];function l(i,c,p,h,d,u){return t(),a("div",null,n)}const k=e(s,[["render",l]]);export{b as __pageData,k as default};
