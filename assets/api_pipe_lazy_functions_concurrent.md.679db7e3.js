import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.1baa841b.js";const u=JSON.parse('{"title":"Function: concurrent()","description":"","frontmatter":{},"headers":[],"relativePath":"api/pipe/lazy/functions/concurrent.md","filePath":"api/pipe/lazy/functions/concurrent.md","lastUpdated":null}'),o={name:"api/pipe/lazy/functions/concurrent.md"},l=n(`<p><a href="./../../../modules.html">fx-flow</a> / <a href="./../">pipe/lazy</a> / concurrent</p><h1 id="function-concurrent" tabindex="-1">Function: concurrent() <a class="header-anchor" href="#function-concurrent" aria-label="Permalink to &quot;Function: concurrent()&quot;">​</a></h1><h2 id="concurrent-length-iterable" tabindex="-1">concurrent(length, iterable) <a class="header-anchor" href="#concurrent-length-iterable" aria-label="Permalink to &quot;concurrent(length, iterable)&quot;">​</a></h2><blockquote><p><strong>concurrent</strong>&lt;<code>A</code>&gt;(<code>length</code>, <code>iterable</code>): <a href="./../../../types/&lt;internal&gt;/interfaces/AsyncIterableIterator.html"><code>AsyncIterableIterator</code></a>&lt;<code>A</code>&gt;</p></blockquote><p>Concurrent is used to balance the load of multiple asynchronous requests.</p><h3 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h3><p>▪ <strong>A</strong></p><h3 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p>▪ <strong>length</strong>: <code>number</code></p><p>▪ <strong>iterable</strong>: <a href="./../../../types/&lt;internal&gt;/interfaces/AsyncIterable.html"><code>AsyncIterable</code></a>&lt;<code>A</code>&gt;</p><h3 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><a href="./../../../types/&lt;internal&gt;/interfaces/AsyncIterableIterator.html"><code>AsyncIterableIterator</code></a>&lt;<code>A</code>&gt;</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  toAsync,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delay</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">, a)),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">concurrent</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">each</span><span style="color:#E1E4E8;">(console.log), </span><span style="color:#6A737D;">// log 1, 2, 3, 4, 5, 6</span></span>
<span class="line"><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// takes 2 seconds</span></span>
<span class="line"><span style="color:#6A737D;">// Task 1,2,3 start together, and task 4,5,6 wait for all the three task finished, then start together.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pipe</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  toAsync,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">delay</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">, a)),</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">each</span><span style="color:#E1E4E8;">(console.log), </span><span style="color:#6A737D;">// log 1, 2, 3, 4, 5, 6</span></span>
<span class="line"><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// takes 6 seconds</span></span>
<span class="line"><span style="color:#6A737D;">// Tasks start sequentially, each task starts after the previous one finished.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  toAsync,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">a</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">, a)),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">concurrent</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">each</span><span style="color:#24292E;">(console.log), </span><span style="color:#6A737D;">// log 1, 2, 3, 4, 5, 6</span></span>
<span class="line"><span style="color:#24292E;">); </span><span style="color:#6A737D;">// takes 2 seconds</span></span>
<span class="line"><span style="color:#6A737D;">// Task 1,2,3 start together, and task 4,5,6 wait for all the three task finished, then start together.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pipe</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  toAsync,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">a</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">delay</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">, a)),</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">each</span><span style="color:#24292E;">(console.log), </span><span style="color:#6A737D;">// log 1, 2, 3, 4, 5, 6</span></span>
<span class="line"><span style="color:#24292E;">); </span><span style="color:#6A737D;">// takes 6 seconds</span></span>
<span class="line"><span style="color:#6A737D;">// Tasks start sequentially, each task starts after the previous one finished.</span></span></code></pre></div><p><a href="https://github.com/niuiic/fx-flow/blob/main/packages/test/src/pipe/lazy/concurrent.spec.ts" target="_blank" rel="noreferrer">More examples</a></p><h3 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h3><p><a href="https://github.com/niuiic/fx-flow/blob/3000733/packages/core/src/pipe/lazy/concurrent.ts#L46" target="_blank" rel="noreferrer">packages/core/src/pipe/lazy/concurrent.ts:46</a></p><h2 id="concurrent-length" tabindex="-1">concurrent(length) <a class="header-anchor" href="#concurrent-length" aria-label="Permalink to &quot;concurrent(length)&quot;">​</a></h2><blockquote><p><strong>concurrent</strong>&lt;<code>A</code>&gt;(<code>length</code>): (<code>iterable</code>) =&gt; <a href="./../../../types/&lt;internal&gt;/interfaces/AsyncIterableIterator.html"><code>AsyncIterableIterator</code></a>&lt;<code>A</code>&gt;</p></blockquote><h3 id="type-parameters-1" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h3><p>▪ <strong>A</strong></p><h3 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><p>▪ <strong>length</strong>: <code>number</code></p><h3 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><code>function</code></p><blockquote><blockquote><p>(<code>iterable</code>): <a href="./../../../types/&lt;internal&gt;/interfaces/AsyncIterableIterator.html"><code>AsyncIterableIterator</code></a>&lt;<code>A</code>&gt;</p></blockquote><h4 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h4><p>▪ <strong>iterable</strong>: <a href="./../../../types/&lt;internal&gt;/interfaces/AsyncIterable.html"><code>AsyncIterable</code></a>&lt;<code>A</code>&gt;</p><h4 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h4><p><a href="./../../../types/&lt;internal&gt;/interfaces/AsyncIterableIterator.html"><code>AsyncIterableIterator</code></a>&lt;<code>A</code>&gt;</p></blockquote><h3 id="source-1" tabindex="-1">Source <a class="header-anchor" href="#source-1" aria-label="Permalink to &quot;Source&quot;">​</a></h3><p><a href="https://github.com/niuiic/fx-flow/blob/3000733/packages/core/src/pipe/lazy/concurrent.ts#L48" target="_blank" rel="noreferrer">packages/core/src/pipe/lazy/concurrent.ts:48</a></p>`,28),t=[l];function p(r,c,y,i,E,h){return a(),e("div",null,t)}const g=s(o,[["render",p]]);export{u as __pageData,g as default};
