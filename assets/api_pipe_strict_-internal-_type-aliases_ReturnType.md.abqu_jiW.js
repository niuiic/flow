import{_ as e,c as t,o as a,R as r}from"./chunks/framework.YlTiAyro.js";const h=JSON.parse('{"title":"Type alias: ReturnType<T>","description":"","frontmatter":{},"headers":[],"relativePath":"api/pipe/strict/-internal-/type-aliases/ReturnType.md","filePath":"api/pipe/strict/-internal-/type-aliases/ReturnType.md","lastUpdated":null}'),o={name:"api/pipe/strict/-internal-/type-aliases/ReturnType.md"},p=r('<p><a href="./../../../../modules.html">fx-flow</a> / <a href="./../../">pipe/strict</a> / <a href="./../">&lt;internal&gt;</a> / ReturnType</p><h1 id="type-alias-returntype-t" tabindex="-1">Type alias: ReturnType&lt;T&gt; <a class="header-anchor" href="#type-alias-returntype-t" aria-label="Permalink to &quot;Type alias: ReturnType\\&lt;T\\&gt;&quot;">​</a></h1><blockquote><p><strong>ReturnType</strong>&lt;<code>T</code>&gt;: <code>T</code> extends (...<code>args</code>) =&gt; infer R ? <code>R</code> : <code>any</code></p></blockquote><p>Obtain the return type of a function type</p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><p>• <strong>T</strong> extends (...<code>args</code>) =&gt; <code>any</code></p><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h2><p>node_modules/.pnpm/typescript@5.3.3/node_modules/typescript/lib/lib.es5.d.ts:1642</p>',8),s=[p];function n(i,c,l,d,u,y){return a(),t("div",null,s)}const T=e(o,[["render",n]]);export{h as __pageData,T as default};
