import{_ as a,o as s,c as e,V as t}from"./chunks/framework.d3b95951.js";const D=JSON.parse('{"title":"Function: flat()","description":"","frontmatter":{},"headers":[],"relativePath":"api/pipe_lazy/functions/function.flat.md","filePath":"api/pipe_lazy/functions/function.flat.md","lastUpdated":null}'),l={name:"api/pipe_lazy/functions/function.flat.md"},n=t(`<h1 id="function-flat" tabindex="-1">Function: flat() <a class="header-anchor" href="#function-flat" aria-label="Permalink to &quot;Function: flat()&quot;">​</a></h1><blockquote><p><strong>flat</strong>&lt;<code>A</code>, <code>B</code>&gt;(<code>iterable</code>, <code>depth</code>?): <a href="./../../types/type-aliases/type-alias.FlatReturnValue.html"><code>FlatReturnValue</code></a>&lt; <code>A</code>, <code>B</code> &gt;</p></blockquote><p>Return flattened Iterable/AsyncIterable. If first argument is number, more perform flatten <code>flat(2, [[[1,2]]]) // [1,2]</code>.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> iter </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">flat</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]]])</span></span>
<span class="line"><span style="color:#A6ACCD;">iter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// {done:false, value: 1}</span></span>
<span class="line"><span style="color:#A6ACCD;">iter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// {done:false, value: 2}</span></span>
<span class="line"><span style="color:#A6ACCD;">iter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// {done:false, value: 3}</span></span>
<span class="line"><span style="color:#A6ACCD;">iter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// {done:false, value: [4, 5]}</span></span>
<span class="line"><span style="color:#A6ACCD;">iter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#A6ACCD;">() </span><span style="color:#676E95;font-style:italic;">// {done:true, value: undefined}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">pipe</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]]]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> flat</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> toArray) </span><span style="color:#676E95;font-style:italic;">// [1, 2, 3, [4, 5]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">pipe</span><span style="color:#A6ACCD;">(</span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [[</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">5</span><span style="color:#A6ACCD;">]]])</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> flat</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> toArray) </span><span style="color:#676E95;font-style:italic;">// [1, 2, 3, [4, 5]]</span></span></code></pre></div><p><a href="https://github.com/niuiic/flow/blob/main/tests/pipe/lazy/flat.spec.ts" target="_blank" rel="noreferrer">More examples</a></p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Default</th></tr></thead><tbody><tr><td style="text-align:left;"><code>A</code> <em>extends</em> <a href="./../../types/type-aliases/type-alias.UniversalIterable.html"><code>UniversalIterable</code></a></td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;"><code>B</code> <em>extends</em> <code>number</code></td><td style="text-align:left;"><code>1</code></td></tr></tbody></table><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;"><code>iterable</code></td><td style="text-align:left;"><code>A</code></td></tr><tr><td style="text-align:left;"><code>depth</code>?</td><td style="text-align:left;"><code>B</code></td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../../types/type-aliases/type-alias.FlatReturnValue.html"><code>FlatReturnValue</code></a>&lt; <code>A</code>, <code>B</code> &gt;</p><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h2><p><a href="https://github.com/niuiic/flow/blob/18f027f/src/pipe/lazy/flat.ts#L197" target="_blank" rel="noreferrer">src/pipe/lazy/flat.ts:197</a></p>`,14),o=[n];function p(r,c,y,i,d,C){return s(),e("div",null,o)}const F=a(l,[["render",p]]);export{D as __pageData,F as default};
