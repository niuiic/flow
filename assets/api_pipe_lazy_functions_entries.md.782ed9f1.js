import{_ as s,o as a,c as e,Q as n}from"./chunks/framework.1baa841b.js";const u=JSON.parse('{"title":"Function: entries()","description":"","frontmatter":{},"headers":[],"relativePath":"api/pipe/lazy/functions/entries.md","filePath":"api/pipe/lazy/functions/entries.md","lastUpdated":null}'),o={name:"api/pipe/lazy/functions/entries.md"},t=n(`<p><a href="./../../../modules.html">fx-flow</a> / <a href="./../">pipe/lazy</a> / entries</p><h1 id="function-entries" tabindex="-1">Function: entries() <a class="header-anchor" href="#function-entries" aria-label="Permalink to &quot;Function: entries()&quot;">​</a></h1><blockquote><p><strong>entries</strong>&lt;<code>A</code>&gt;(<code>args</code>): <a href="./../../../types/&lt;internal&gt;/interfaces/Generator.html"><code>Generator</code></a>&lt;<a href="./../../../types/type-aliases/Entries.html"><code>Entries</code></a>&lt;<code>A</code>&gt;, <code>void</code>&gt;</p></blockquote><p>Convert object to iterator.</p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><p>▪ <strong>A</strong> extends <a href="./../../../types/type-aliases/AnyObject.html"><code>AnyObject</code></a></p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><p>▪ <strong>args</strong>: <code>A</code></p><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./../../../types/&lt;internal&gt;/interfaces/Generator.html"><code>Generator</code></a>&lt;<a href="./../../../types/type-aliases/Entries.html"><code>Entries</code></a>&lt;<code>A</code>&gt;, <code>void</code>&gt;</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">iterator</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">entries</span><span style="color:#E1E4E8;">({a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">iterator.</span><span style="color:#B392F0;">next</span><span style="color:#E1E4E8;">().done </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">iterator</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#6F42C1;">entries</span><span style="color:#24292E;">({a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">().value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">().value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">iterator.</span><span style="color:#6F42C1;">next</span><span style="color:#24292E;">().done </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span></code></pre></div><p><a href="https://github.com/niuiic/fx-flow/blob/main/packages/test/src/pipe/lazy/entries.spec.ts" target="_blank" rel="noreferrer">More examples</a></p><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h2><p><a href="https://github.com/niuiic/fx-flow/blob/3000733/packages/core/src/pipe/lazy/entries.ts#L16" target="_blank" rel="noreferrer">packages/core/src/pipe/lazy/entries.ts:16</a></p>`,15),l=[t];function p(r,c,i,y,E,d){return a(),e("div",null,l)}const m=s(o,[["render",p]]);export{u as __pageData,m as default};
