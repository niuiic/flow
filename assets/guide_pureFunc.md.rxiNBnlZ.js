import{_ as s,c as i,o as a,R as e,a4 as n}from"./chunks/framework.YlTiAyro.js";const g=JSON.parse('{"title":"Pure Function","description":"","frontmatter":{},"headers":[],"relativePath":"guide/pureFunc.md","filePath":"guide/pureFunc.md","lastUpdated":1707371395000}'),t={name:"guide/pureFunc.md"},p=e('<h1 id="pure-function" tabindex="-1">Pure Function <a class="header-anchor" href="#pure-function" aria-label="Permalink to &quot;Pure Function&quot;">â€‹</a></h1><p>Immutable restrictions on function input parameters usually greatly increase the runtime burden.</p><p>This library provides a tool type named <code>Immutable</code>, tries to make this restriction with typescript and then there would be no performance loss when running.</p><p><img src="'+n+`" alt="immutable showcase"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Immutable</code> has the second parameter to specify types to ignore.</p></div><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`Immutable\` will expand the input type.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`File\` is a builtin type, which is not equal to expaned \`File\`.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// You may need to ignore \`File\`, or it cannot satisfies another \`File\`.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Immutable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  File</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Res = {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   readonly file: File</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// }</span></span></code></pre></div>`,6),l=[p];function h(r,c,o,d,k,u){return a(),i("div",null,l)}const y=s(t,[["render",h]]);export{g as __pageData,y as default};
