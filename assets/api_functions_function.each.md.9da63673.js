import{_ as t,o as e,c as a,O as r}from"./chunks/framework.7fc6a857.js";const b=JSON.parse('{"title":"each()","description":"","frontmatter":{},"headers":[],"relativePath":"api/functions/function.each.md","filePath":"api/functions/function.each.md"}'),l={name:"api/functions/function.each.md"},o=r('<h1 id="each" tabindex="-1">each() <a class="header-anchor" href="#each" aria-label="Permalink to &quot;each()&quot;">​</a></h1><p><strong><code>Function</code></strong></p><blockquote><p><strong>each</strong>&lt;A, R&gt;(fn: <code>Function</code>, iterable: <a href="./../module.internal_/interfaces/interface.Iterable.html"><code>Iterable</code></a>&lt;<code>A</code>&gt;): <code>void</code></p></blockquote><p>Iterates over Iterable/AsyncIterable, applying each in turn to <code>fn</code>.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">each</span><span style="color:#A6ACCD;">(console</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">log</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">]) </span><span style="color:#676E95;font-style:italic;">// log 1, 2, 3</span></span></code></pre></div><p><a href="https://github.com/niuiic/flow/blob/main/tests/functions/strict/each.spec.ts" target="_blank" rel="noreferrer">More examples</a></p><p><strong>Source:</strong> <a href="https://github.com/niuiic/flow/blob/3049742/src/functions/strict/each.ts#L30" target="_blank" rel="noreferrer">src/functions/strict/each.ts:30</a></p><h2 id="type-parameters" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Default</th></tr></thead><tbody><tr><td style="text-align:left;">A</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">R</td><td style="text-align:left;"><code>unknown</code></td></tr></tbody></table><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;">fn</td><td style="text-align:left;">(args: <a href="./../module.internal_/type-aliases/type-alias.Immutable.html"><code>Immutable</code></a>&lt;<code>A</code>&gt;) =&gt; <code>R</code></td></tr><tr><td style="text-align:left;">iterable</td><td style="text-align:left;"><a href="./../module.internal_/interfaces/interface.Iterable.html"><code>Iterable</code></a>&lt;<code>A</code>&gt;</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>void</code></p><blockquote><p><strong>each</strong>&lt;A, R&gt;(fn: <code>Function</code>): <code>Function</code></p></blockquote><p><strong>Source:</strong> <a href="https://github.com/niuiic/flow/blob/3049742/src/functions/strict/each.ts#L31" target="_blank" rel="noreferrer">src/functions/strict/each.ts:31</a></p><h2 id="type-parameters-1" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-1" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Default</th></tr></thead><tbody><tr><td style="text-align:left;">A</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">R</td><td style="text-align:left;"><code>unknown</code></td></tr></tbody></table><h2 id="parameters-1" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-1" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;">fn</td><td style="text-align:left;">(args: <a href="./../module.internal_/type-aliases/type-alias.Immutable.html"><code>Immutable</code></a>&lt;<code>A</code>&gt;) =&gt; <code>R</code></td></tr></tbody></table><h2 id="returns-1" tabindex="-1">Returns <a class="header-anchor" href="#returns-1" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>Function</code></p><blockquote><blockquote><p>(iterable: <a href="./../module.internal_/interfaces/interface.Iterable.html"><code>Iterable</code></a>&lt;<code>A</code>&gt;): <code>void</code></p></blockquote><h3 id="parameters-2" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-2" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;">iterable</td><td style="text-align:left;"><a href="./../module.internal_/interfaces/interface.Iterable.html"><code>Iterable</code></a>&lt;<code>A</code>&gt;</td></tr></tbody></table><h3 id="returns-2" tabindex="-1">Returns <a class="header-anchor" href="#returns-2" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><code>void</code></p></blockquote><blockquote><p><strong>each</strong>&lt;A, R&gt;(fn: <code>Function</code>, iterable: <a href="./../module.internal_/interfaces/interface.AsyncIterable.html"><code>AsyncIterable</code></a>&lt;<code>A</code>&gt;): <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><p><strong>Source:</strong> <a href="https://github.com/niuiic/flow/blob/3049742/src/functions/strict/each.ts#L33" target="_blank" rel="noreferrer">src/functions/strict/each.ts:33</a></p><h2 id="type-parameters-2" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-2" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Default</th></tr></thead><tbody><tr><td style="text-align:left;">A</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">R</td><td style="text-align:left;"><code>unknown</code></td></tr></tbody></table><h2 id="parameters-3" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-3" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;">fn</td><td style="text-align:left;">(args: <a href="./../module.internal_/type-aliases/type-alias.Immutable.html"><code>Immutable</code></a>&lt;<a href="./../module.internal_/type-aliases/type-alias.Awaited.html"><code>Awaited</code></a>&lt;<code>A</code>&gt;&gt;) =&gt; <code>R</code></td></tr><tr><td style="text-align:left;">iterable</td><td style="text-align:left;"><a href="./../module.internal_/interfaces/interface.AsyncIterable.html"><code>AsyncIterable</code></a>&lt;<code>A</code>&gt;</td></tr></tbody></table><h2 id="returns-3" tabindex="-1">Returns <a class="header-anchor" href="#returns-3" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>Promise</code>&lt;<code>void</code>&gt;</p><blockquote><p><strong>each</strong>&lt;A, R&gt;(fn: <code>Function</code>): <code>Function</code></p></blockquote><p><strong>Source:</strong> <a href="https://github.com/niuiic/flow/blob/3049742/src/functions/strict/each.ts#L34" target="_blank" rel="noreferrer">src/functions/strict/each.ts:34</a></p><h2 id="type-parameters-3" tabindex="-1">Type parameters <a class="header-anchor" href="#type-parameters-3" aria-label="Permalink to &quot;Type parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Default</th></tr></thead><tbody><tr><td style="text-align:left;">A</td><td style="text-align:left;">-</td></tr><tr><td style="text-align:left;">R</td><td style="text-align:left;"><code>unknown</code></td></tr></tbody></table><h2 id="parameters-4" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-4" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;">fn</td><td style="text-align:left;">(args: <a href="./../module.internal_/type-aliases/type-alias.Immutable.html"><code>Immutable</code></a>&lt;<a href="./../module.internal_/type-aliases/type-alias.Awaited.html"><code>Awaited</code></a>&lt;<code>A</code>&gt;&gt;) =&gt; <code>R</code></td></tr></tbody></table><h2 id="returns-4" tabindex="-1">Returns <a class="header-anchor" href="#returns-4" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>Function</code></p><blockquote><blockquote><p>(iterable: <a href="./../module.internal_/interfaces/interface.AsyncIterable.html"><code>AsyncIterable</code></a>&lt;<code>A</code>&gt;): <code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote><h3 id="parameters-5" tabindex="-1">Parameters <a class="header-anchor" href="#parameters-5" aria-label="Permalink to &quot;Parameters&quot;">​</a></h3><table><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th></tr></thead><tbody><tr><td style="text-align:left;">iterable</td><td style="text-align:left;"><a href="./../module.internal_/interfaces/interface.AsyncIterable.html"><code>AsyncIterable</code></a>&lt;<code>A</code>&gt;</td></tr></tbody></table><h3 id="returns-5" tabindex="-1">Returns <a class="header-anchor" href="#returns-5" aria-label="Permalink to &quot;Returns&quot;">​</a></h3><p><code>Promise</code>&lt;<code>void</code>&gt;</p></blockquote>',40),n=[o];function s(c,d,i,h,p,u){return e(),a("div",null,n)}const m=t(l,[["render",s]]);export{b as __pageData,m as default};
